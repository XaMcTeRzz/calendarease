// –ú–æ–¥—É–ª—å –¥–ª—è –≤–∑–∞—î–º–æ–¥—ñ—ó –∑ Telegram –±–æ—Ç–æ–º
// –£ —Ä–µ–∞–ª—å–Ω—ñ–π —ñ–º–ø–ª–µ–º–µ–Ω—Ç–∞—Ü—ñ—ó –ø–æ—Ç—Ä—ñ–±–Ω–æ –Ω–∞–ª–∞—à—Ç—É–≤–∞—Ç–∏ Telegraf.js –Ω–∞ —Å–µ—Ä–≤–µ—Ä—ñ

import { Task, VoiceNote } from './types';

// API_TOKEN –±—É–¥–µ –Ω–∞–¥–∞–Ω–æ –∑ –±–µ–∫–µ–Ω–¥–∞
const TELEGRAM_API_TOKEN = process.env.TELEGRAM_BOT_TOKEN || 'YOUR_BOT_TOKEN';

/**
 * –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è —á–µ—Ä–µ–∑ Telegram
 * –£ —Ä–µ–∞–ª—å–Ω—ñ–π —ñ–º–ø–ª–µ–º–µ–Ω—Ç–∞—Ü—ñ—ó –ø–æ—Ç—Ä—ñ–±–Ω–æ –≤–∏–∫–ª–∏–∫–∞—Ç–∏ —Ü—é —Ñ—É–Ω–∫—Ü—ñ—é –∑ –±–µ–∫–µ–Ω–¥–∞
 */
export async function sendReminderToTelegram(chatId: string, task: Task): Promise<boolean> {
  try {
    // –í —Ä–µ–∞–ª—å–Ω—ñ–π —ñ–º–ø–ª–µ–º–µ–Ω—Ç–∞—Ü—ñ—ó –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏–º–µ Telegraf.js –∞–±–æ –ø—Ä—è–º–µ API
    console.log(`–í—ñ–¥–ø—Ä–∞–≤–∫–∞ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –¥–ª—è ${task.title} –Ω–∞ —á–∞—Ç ${chatId}`);
    
    // –Ü–º—ñ—Ç–∞—Ü—ñ—è API –∑–∞–ø–∏—Ç—É
    const response = await mockTelegramApiRequest(
      'sendMessage',
      {
        chat_id: chatId,
        text: `üîî –ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è: ${task.title}\n\n${task.description || ''}\n\n–ß–∞—Å: ${new Date(task.date).toLocaleString('uk')}`
      }
    );
    
    return response.ok;
  } catch (error) {
    console.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ Telegram:', error);
    return false;
  }
}

/**
 * –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –≥–æ–ª–æ—Å–æ–≤–æ—ó –∑–∞–º—ñ—Ç–∫–∏ –≤ Telegram
 * –£ —Ä–µ–∞–ª—å–Ω—ñ–π —ñ–º–ø–ª–µ–º–µ–Ω—Ç–∞—Ü—ñ—ó –ø–æ—Ç—Ä—ñ–±–Ω–æ –≤–∏–∫–ª–∏–∫–∞—Ç–∏ —Ü—é —Ñ—É–Ω–∫—Ü—ñ—é –∑ –±–µ–∫–µ–Ω–¥–∞
 */
export async function sendVoiceNoteToTelegram(chatId: string, voiceNote: VoiceNote): Promise<boolean> {
  try {
    // –í —Ä–µ–∞–ª—å–Ω—ñ–π —ñ–º–ø–ª–µ–º–µ–Ω—Ç–∞—Ü—ñ—ó –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏–º–µ Telegraf.js
    console.log(`–í—ñ–¥–ø—Ä–∞–≤–∫–∞ –≥–æ–ª–æ—Å–æ–≤–æ—ó –∑–∞–º—ñ—Ç–∫–∏ ${voiceNote.title} –Ω–∞ —á–∞—Ç ${chatId}`);
    
    // –Ü–º—ñ—Ç–∞—Ü—ñ—è API –∑–∞–ø–∏—Ç—É –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    const response = await mockTelegramApiRequest(
      'sendVoice',
      {
        chat_id: chatId,
        voice: voiceNote.recordingUrl,
        caption: `üìù ${voiceNote.title}`
      }
    );
    
    return response.ok;
  } catch (error) {
    console.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ Telegram:', error);
    return false;
  }
}

/**
 * –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è telegram_chat_id –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑–∞ –π–æ–≥–æ —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä–æ–º
 * –í —Ä–µ–∞–ª—å–Ω—ñ–π —ñ–º–ø–ª–µ–º–µ–Ω—Ç–∞—Ü—ñ—ó –±—É–¥–µ –æ—Ç—Ä–∏–º–∞–Ω–æ –∑ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
 */
export function getUserTelegramChatId(userId: string): string | null {
  // –Ü–º—ñ—Ç–∞—Ü—ñ—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è chatId –∑ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
  // –í —Ä–µ–∞–ª—å–Ω—ñ–π —ñ–º–ø–ª–µ–º–µ–Ω—Ç–∞—Ü—ñ—ó –±—É–¥–µ –æ—Ç—Ä–∏–º–∞–Ω–æ –∑ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö (Supabase/PlanetScale)
  return 'mock_chat_id_123456789';
}

/**
 * –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è —ñ–º—ñ—Ç–∞—Ü—ñ—ó –∑–∞–ø–∏—Ç—ñ–≤ –¥–æ Telegram API
 */
async function mockTelegramApiRequest(method: string, params: any): Promise<{ ok: boolean, result?: any }> {
  return new Promise((resolve) => {
    // –Ü–º—ñ—Ç–∞—Ü—ñ—è –∑–∞—Ç—Ä–∏–º–∫–∏ –º–µ—Ä–µ–∂—ñ
    setTimeout(() => {
      console.log(`[MOCK] Telegram API call: ${method}`, params);
      resolve({ ok: true, result: { message_id: 123, chat: { id: params.chat_id } } });
    }, 500);
  });
}

/**
 * –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è Telegram webhook (–≤ —Ä–µ–∞–ª—å–Ω—ñ–π —ñ–º–ø–ª–µ–º–µ–Ω—Ç–∞—Ü—ñ—ó)
 */
export async function setupTelegramWebhook(webhookUrl: string): Promise<boolean> {
  try {
    // –í —Ä–µ–∞–ª—å–Ω—ñ–π —ñ–º–ø–ª–µ–º–µ–Ω—Ç–∞—Ü—ñ—ó –Ω–∞–ª–∞—à—Ç—É—î webhook –¥–ª—è –±–æ—Ç–∞
    console.log(`–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è webhook –Ω–∞ ${webhookUrl}`);
    return true;
  } catch (error) {
    console.error('–ü–æ–º–∏–ª–∫–∞ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è webhook:', error);
    return false;
  }
} 